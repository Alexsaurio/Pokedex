{"version":3,"sources":["containers/searchBar/searchBar.jsx","axios/axios-poke.jsx","components/pokemon/pokemon.jsx","components/utils/au/au.jsx","containers/pokemonList/pokemonList.jsx","components/App.jsx","serviceWorker.js","index.jsx"],"names":["SearchBar","className","Grid","container","direction","justify","alignItems","FormControl","fullWidth","variant","color","InputLabel","htmlFor","OutlinedInput","onChange","this","props","Buscar","id","labelWidth","Component","instance","axios","create","baseURL","Pokemon","state","pokemon","imagen","tipos","buscarPokemon","datos","name","nextProps","axiosPoke","get","then","reponse","setState","data","sprites","front_default","types","catch","error","console","log","tipo1","tipo2","length","type","src","alt","aux","children","PokemonList","pokedex","Object","keys","PokeList","map","igkey","Array","p","_","key","Region","App","handleInputChange","event","value","target","pokeSearch","forEach","indexOf","push","pokeList","region","handlerClickGeneration","bind","gen","pokemon_species","main_region","e","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gSA+BeA,E,iLArBP,OACI,yBAAKC,UAAU,aACX,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UACX,kBAACC,EAAA,EAAD,CAAaN,UAAU,cAAcO,WAAS,EAACC,QAAQ,WAAWC,MAAM,aACpE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,6BAApB,uBACA,kBAACC,EAAA,EAAD,CACIC,SAAUC,KAAKC,MAAMC,OACrBC,GAAG,4BACHC,WAAY,a,GAfhBC,a,gBCATC,E,OALEC,EAAMC,OAAO,CAC1BC,QAAS,+BC2DEC,E,YAxDb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KAEDU,MAAQ,CACXC,QAAS,GACTC,OAAQ,GACRC,MAAO,IANQ,E,iFAWjBd,KAAKe,cAAcf,KAAKC,MAAMe,MAAMC,Q,uDAGLC,GAC7BlB,KAAKe,cAAcG,EAAUF,MAAMC,Q,oCAGzBL,GAAS,IAAD,OACpBO,EAAUC,IAAI,YAAcR,EAAU,KACnCS,MAAK,SAAAC,GACJ,EAAKC,SAAS,CAAEX,QAASU,EAAQE,OACjC,EAAKD,SAAS,CAAEV,OAAQS,EAAQE,KAAKC,QAAQC,gBAC7C,EAAKH,SAAS,CAAET,MAAO,EAAKH,MAAMC,QAAQe,WAG3CC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAMhB,IAGIf,EAHEF,EAAUZ,KAAKW,MAAMC,QACvBoB,EAAQ,GACRC,EAAQ,GAUZ,OARgC,IAA5BjC,KAAKW,MAAMG,MAAMoB,QACnBF,EAAQhC,KAAKW,MAAMG,MAAM,GAAGqB,KAAKlB,KACjCH,EAAQ,+BAAI,0BAAM5B,UAAW8C,GAAQA,KACA,IAA5BhC,KAAKW,MAAMG,MAAMoB,SAC1BF,EAAQhC,KAAKW,MAAMG,MAAM,GAAGqB,KAAKlB,KACjCgB,EAAQjC,KAAKW,MAAMG,MAAM,GAAGqB,KAAKlB,KACjCH,EAAQ,+BAAI,0BAAM5B,UAAW8C,GAAQA,GAA7B,KAA4C,0BAAM9C,UAAW+C,GAAQA,KAG7E,yBAAK/C,UAAU,WACb,uBAAGA,UAAU,UAAU0B,EAAQK,MAC/B,yBAAKmB,IAAKpC,KAAKW,MAAME,OAAQwB,IAAI,KAChCvB,O,GAnDaT,aCFPiC,EAFH,SAACrC,GAAD,OAAWA,EAAMsC,UC2BdC,E,iLApBF,IAAD,OAEAC,EAAUC,OAAOC,KAAK3C,KAAKC,MAAM2C,UACpCC,KAAK,SAAAC,GACF,OAAO,YAAIC,MAAM,EAAK9C,MAAM2C,SAASE,KAASD,KAAK,SAACG,EAAEC,GAClD,OAAO,kBAAC,EAAD,CAAIC,IAAKJ,GACZ,kBAAC,EAAD,CAAS9B,MAAOgC,WAK5B,OACI,6BACI,kDAAuB,oCAAUhD,KAAKC,MAAMkD,OAArB,KAAvB,KACEV,O,GAhBQpC,a,QCsEX+C,E,YAjEb,WAAYnD,GAAQ,IAAD,8BACjB,4CAAMA,KA8BRoD,kBAAoB,SAACC,GAAW,IACtBC,EAAUD,EAAME,OAAhBD,MAEJE,EAAa,GACjB,EAAK9C,MAAM8C,WAAWC,SAAQ,SAAC9C,IACS,IAAjCA,EAAQK,KAAK0C,QAAQJ,IACvBE,EAAWG,KAAKhD,MAIrB,EAAKW,SAAS,CACZsC,SAAUJ,KAvCZ,EAAK9C,MAAQ,CACXkD,SAAU,GACVJ,WAAY,GACZK,OAAQ,cAGV,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBATb,E,iFAajBhE,KAAK+D,uBAAuB,K,6CAGPE,GAAM,IAAD,OAC1B9C,EAAUC,IAAI,eAAiB6C,EAAM,KAElC5C,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZsC,SAAUvC,EAAQE,KAAK0C,gBACvBT,WAAYnC,EAAQE,KAAK0C,gBACzBJ,OAAQxC,EAAQE,KAAK2C,YAAYlD,UAGpCW,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAmBR,IAAD,OACP,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,CAAWgB,OAAQ,SAAAkE,GAAC,OAAI,EAAKf,kBAAkBe,MAC/C,kBAACjF,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,UACX,kBAAC8E,EAAA,EAAD,CAAQ3E,QAAQ,WAAW4E,QAAS,kBAAM,EAAKP,uBAAuB,KAAtE,iBACA,kBAACM,EAAA,EAAD,CAAQ3E,QAAQ,WAAW4E,QAAS,kBAAM,EAAKP,uBAAuB,KAAtE,kBACA,kBAACM,EAAA,EAAD,CAAQ3E,QAAQ,WAAW4E,QAAS,kBAAM,EAAKP,uBAAuB,KAAtE,oBAEF,kBAAC,EAAD,CAAaZ,OAASnD,KAAKW,MAAMmD,OAASlB,SAAU5C,KAAKW,MAAMkD,gB,GA5DrDxD,aCGEkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdxD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwD,c","file":"static/js/main.c5afc484.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\n\r\nclass SearchBar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\">\r\n                    <FormControl className=\"Search_Form\" fullWidth variant=\"outlined\" color=\"secondary\">\r\n                        <InputLabel htmlFor=\"outlined-adornment-amount\">Buscador pokem√≥n</InputLabel>\r\n                        <OutlinedInput\r\n                            onChange={this.props.Buscar}\r\n                            id=\"outlined-adornment-amount\"\r\n                            labelWidth={140}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://pokeapi.co/api/v2/',\r\n\r\n})\r\n\r\nexport default instance;","import React, { Component } from 'react';\r\n\r\nimport axiosPoke from '../../axios/axios-poke';\r\n\r\nclass Pokemon extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pokemon: [],\r\n      imagen: [],\r\n      tipos: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.buscarPokemon(this.props.datos.name);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n      this.buscarPokemon(nextProps.datos.name);\r\n  }\r\n\r\n  buscarPokemon(pokemon){\r\n    axiosPoke.get('/pokemon/' + pokemon + '/')\r\n      .then(reponse => {\r\n        this.setState({ pokemon: reponse.data });\r\n        this.setState({ imagen: reponse.data.sprites.front_default });\r\n        this.setState({ tipos: this.state.pokemon.types });\r\n\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n\r\n    const pokemon = this.state.pokemon;\r\n    let tipo1 = \"\";\r\n    let tipo2 = \"\";\r\n    let tipos;\r\n    if (this.state.tipos.length === 1) {\r\n      tipo1 = this.state.tipos[0].type.name;\r\n      tipos = <p> <span className={tipo1}>{tipo1}</span></p>;\r\n    } else if (this.state.tipos.length === 2) {\r\n      tipo1 = this.state.tipos[0].type.name;\r\n      tipo2 = this.state.tipos[1].type.name;\r\n      tipos = <p> <span className={tipo1}>{tipo1}</span>  <span className={tipo2}>{tipo2}</span></p>\r\n    }\r\n    return (\r\n      <div className=\"Pokemon\">\r\n        <p className=\"Nombre\">{pokemon.name}</p>\r\n        <img src={this.state.imagen} alt=\"\" />\r\n        {tipos}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pokemon;","const aux = (props) => props.children ;\r\n\r\nexport default aux;","import React, { Component } from 'react';\r\n\r\nimport Pokemon from '../../components/pokemon/pokemon';\r\nimport Au from '../../components/utils/au/au';\r\n\r\nclass PokemonList extends Component {\r\n    \r\n    render(){\r\n        \r\n        let pokedex = Object.keys(this.props.PokeList)\r\n        .map( igkey => {\r\n            return [...Array(this.props.PokeList[igkey])].map( (p,_) => {\r\n                return <Au key={igkey}>\r\n                    <Pokemon datos={p} />\r\n                </Au>\r\n            });\r\n        });\r\n           \r\n        return(\r\n            <div>\r\n                <h1>Lista de pokemons: <strong> {this.props.Region} </strong> </h1>\r\n                { pokedex }\r\n            </div>          \r\n        );\r\n    }\r\n}\r\n\r\nexport default PokemonList;","import React, { Component } from 'react';\r\n\r\nimport SearchBar from '../containers/searchBar/searchBar';\r\nimport PokemonList from '../containers/pokemonList/pokemonList';\r\nimport axiosPoke from '../axios/axios-poke';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pokeList: [],\r\n      pokeSearch: [],\r\n      region: \"Sin region\",\r\n    };\r\n\r\n    this.handlerClickGeneration = this.handlerClickGeneration.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handlerClickGeneration(1);\r\n  }\r\n\r\n  handlerClickGeneration(gen) {\r\n    axiosPoke.get('/generation/' + gen + '/')\r\n    //axiosPoke.get('/generation/' + gen + '/')\r\n      .then(reponse => {\r\n        this.setState({ \r\n          pokeList: reponse.data.pokemon_species,\r\n          pokeSearch: reponse.data.pokemon_species,\r\n          region: reponse.data.main_region.name\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const { value } = event.target;\r\n\r\n    let pokeSearch = [];\r\n    this.state.pokeSearch.forEach((pokemon) => {\r\n       if (pokemon.name.indexOf(value) !== -1) {\r\n         pokeSearch.push(pokemon);\r\n         return;\r\n       }\r\n    });\r\n    this.setState({ \r\n      pokeList: pokeSearch\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <SearchBar Buscar={e => this.handleInputChange(e)}/>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"center\">\r\n          <Button variant=\"outlined\" onClick={() => this.handlerClickGeneration(1)}> Generacion I</Button> \r\n          <Button variant=\"outlined\" onClick={() => this.handlerClickGeneration(2)}> Generacion II</Button>\r\n          <Button variant=\"outlined\" onClick={() => this.handlerClickGeneration(3)}> Generacion III</Button>\r\n        </Grid>\r\n        <PokemonList Region={ this.state.region } PokeList={this.state.pokeList} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './sass/main.scss';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}